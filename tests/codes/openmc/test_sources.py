# SPDX-FileCopyrightText: 2021-present M. Coleman, J. Cook, F. Franza
# SPDX-FileCopyrightText: 2021-present I.A. Maione, S. McIntosh
# SPDX-FileCopyrightText: 2021-present J. Morris, D. Short
#
# SPDX-License-Identifier: LGPL-2.1-or-latercod
from unittest.mock import patch

import numpy as np
import pytest

from bluemira.codes.openmc.params import (
    OpenMCNeutronicsSolverParams,
    PlasmaSourceParameters,
)
from bluemira.codes.openmc.sources import make_pps_source, make_ring_source
from bluemira.radiation_transport.error import SourceError

DT_ENERGY_IN_EV = 14.06e6  # 14.06 MeV


class TestSource:
    def setup_method(self):
        self.psp = PlasmaSourceParameters.from_parameterframe(
            OpenMCNeutronicsSolverParams.from_dict({
                "R_0": {"value": 9.0, "unit": "m"},
                "A": {"value": 2, "unit": ""},
                "kappa": {"value": 1.5, "unit": ""},
                "delta": {"value": 0.9, "unit": ""},
                "reactor_power": {"value": 2, "unit": "MW"},
                "peaking_factor": {"value": 1, "unit": ""},
                "T_e": {"value": 1e6, "unit": "K"},
                "shaf_shift": {"value": 0.1, "unit": "m"},
                "vertical_shift": {"value": 0.1, "unit": "m"},
            })
        )

    def test_error_on_import_failure(self):
        with (
            patch("bluemira.codes.openmc.sources.PPS_ISO_INSTALLED", new=False),
            pytest.raises(SourceError, match="installation not found"),
        ):
            make_pps_source(self.psp)

    def test_pss_creation(self):
        pytest.importorskip("pps_isotropic")
        source = make_pps_source(self.psp)
        assert source.parameters.startswith("major_r=900.0")

    def test_make_ring_source(self):
        """
        Check that the ring source is outputting particles in the correct energies and
        locations (as a ring with thickness=0 and height=0, at the center generated by
        PlasmaSourceParameters).
        """
        ring_source = make_ring_source(self.psp)
        expected_radius = (self.psp.major_radius + self.psp.shaf_shift) * 100
        # position check
        np.testing.assert_allclose(ring_source.space.r.sample(10), expected_radius)
        np.testing.assert_array_equal(ring_source.space.z.sample(10), 0.0)
        # energy check
        np.testing.assert_allclose(
            ring_source.energy.sample(10), DT_ENERGY_IN_EV, rtol=0.005
        )
